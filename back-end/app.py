from flask import Flask, jsonify
import json
from flask_cors import CORS
import math

app = Flask(__name__)
CORS(app)  # —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–∞

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (list[dict])
with open("asteroids.json", "r") as f:
    asteroids_data = json.load(f)

@app.route("/")
def home():
    return jsonify({"message": "Asteroid API —Ä–∞–±–æ—Ç–∞–µ—Ç üöÄ"})

@app.route("/api/asteroids/hazardous", methods=["GET"])
def get_hazardous():
    hazardous = [a for a in asteroids_data if a.get("hazardous")]
    return jsonify(hazardous)

@app.route("/api/asteroids/all", methods=["GET"])
def get_all():
    formatted_asteroids = [format_asteroid(a) for a in asteroids_data]
    return jsonify(formatted_asteroids)

# ---------- helper functions ----------

def format_asteroid(a):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ + —Ä–∞—Å—á–µ—Ç KE –∏ –∫—Ä–∞—Ç–µ—Ä–∞"""
    diameter = a.get("estimated_diameter_m", 0)
    mass = a.get("mass_kg", diameter**3 * 3000)  # –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ ~3000 kg/m¬≥
    velocity = a.get("velocity_km_s", 20) * 1000  # –º/—Å
    impact_angle = a.get("impact_angle_deg", 45)  # –≥—Ä–∞–¥—É—Å—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 45¬∞

    # –ö–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è
    KE = 0.5 * mass * velocity**2  # –î–∂–æ—É–ª–∏

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–∏–∞–º–µ—Ç—Ä–∞ –∫—Ä–∞—Ç–µ—Ä–∞ (–º)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–ø–∏—Ä–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É: D = k * (KE / (rho * g))**0.25
    k = 1.3
    rho_surface = 2500  # –∫–≥/–º¬≥ (—Å—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–Ω—Ç–∞)
    g = 9.81  # –º/—Å¬≤
    crater_diameter = k * (KE / (rho_surface * g))**0.25

    # –í—ã–±—Ä–æ—Å –ø—ã–ª–∏ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    dust_height = 0.1 * crater_diameter
    dust_radius = 1.2 * crater_diameter

    return {
        "name": a.get("name"),
        "date": a.get("date"),
        "is_potentially_hazardous_asteroid": a.get("hazardous"),
        "estimated_diameter": {
            "meters": {
                "estimated_diameter_min": diameter * 0.9,
                "estimated_diameter_max": diameter * 1.1
            }
        },
        "relative_velocity": {
            "kilometers_per_second": str(a.get("velocity_km_s"))
        },
        "miss_distance": {
            "kilometers": str(a.get("miss_distance_km"))
        },
        "kinetic_energy_joules": KE,
        "crater": {
            "diameter_m": crater_diameter,
            "dust_radius_m": dust_radius,
            "dust_height_m": dust_height
        }
    }

if __name__ == "__main__":
    app.run(debug=True)
