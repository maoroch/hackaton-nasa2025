// Main.tsx
"use client";

import { useRef, useEffect, useState } from "react";
import * as THREE from "three";
import { Canvas, useFrame, useThree, useLoader } from "@react-three/fiber";
import { TextureLoader } from "three";
import { OrbitControls as DreiOrbitControls } from "@react-three/drei";
import Asteroid from "./Asteroid";
import Modal from "./moduleWindows/ModalResult";
import AsteroidImpactModal from "./moduleWindows/AsteroidImpactModal";
import { useAsteroid } from './context/AsteroidContext';

interface GeoData {
  lat: number;
  lon: number;
  eco_name: string;
  biome: string;
  realm: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å—ã
const formatMass = (massKg: number | undefined): string => {
  if (massKg === undefined || massKg === null || isNaN(massKg)) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }
  
  if (massKg >= 1e12) {
    return `${(massKg / 1e12).toFixed(2)} –º–ª—Ä–¥ —Ç–æ–Ω–Ω`;
  } else if (massKg >= 1e9) {
    return `${(massKg / 1e9).toFixed(2)} –º–ª–Ω —Ç–æ–Ω–Ω`;
  } else if (massKg >= 1e6) {
    return `${(massKg / 1e6).toFixed(2)} —Ç—ã—Å. —Ç–æ–Ω–Ω`;
  } else if (massKg >= 1e3) {
    return `${(massKg / 1e3).toFixed(2)} —Ç–æ–Ω–Ω`;
  } else {
    return `${massKg.toFixed(2)} –∫–≥`;
  }
};

const Earth = ({ 
  setEarthMesh, 
  onGeoDataReceived
}: { 
  setEarthMesh: (mesh: THREE.Mesh | null) => void;
  onGeoDataReceived: (data: GeoData) => void;
}) => {
  const meshRef = useRef<THREE.Mesh>(null);
  const { camera, gl } = useThree();
  const { selectedAsteroid, setImpactData } = useAsteroid(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

  const raycaster = new THREE.Raycaster();
  const pointer = new THREE.Vector2();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ó–µ–º–ª–∏
  const [earthTexture, bumpTexture, specularTexture] = useLoader(TextureLoader, [
    "/textures/Albedo.jpg",
    "/textures/night_lights_modified.png",
    "/textures/night_lights_modified.png",
  ]);

  const handleClick = async (event: MouseEvent) => {
    pointer.x = (event.clientX / window.innerWidth) * 2 - 1;
    pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;

    raycaster.setFromCamera(pointer, camera);

    if (meshRef.current) {
      const intersects = raycaster.intersectObject(meshRef.current);
      if (intersects.length > 0) {
        const point = intersects[0].point;
        const latLon = cartesianToLatLon(point);
        console.log("üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:", latLon);

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∞—Å—Ç–µ—Ä–æ–∏–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞—Ä–∞
        if (selectedAsteroid) {
          const impactData = {
            name: selectedAsteroid.name,
            coordinates: latLon,
            mass: formatMass(selectedAsteroid.mass_kg),
            diameter: `${selectedAsteroid.estimated_diameter.meters.estimated_diameter_min.toFixed(2)} –º`,
            velocity: `${parseFloat(selectedAsteroid.relative_velocity.kilometers_per_second).toFixed(2)} –∫–º/—Å`,
            kinetic_energy: selectedAsteroid.kinetic_energy_joules ? 
              `${selectedAsteroid.kinetic_energy_joules.toExponential(2)} –î–∂` : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            crater: selectedAsteroid.crater ? {
              diameter: `${selectedAsteroid.crater.diameter_m.toFixed(1)} –º`,
              dust_radius: `${selectedAsteroid.crater.dust_radius_m.toFixed(1)} –º`, 
              dust_height: `${selectedAsteroid.crater.dust_height_m.toFixed(1)} –º`
            } : {
              diameter: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
              dust_radius: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", 
              dust_height: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            },
            is_hazardous: selectedAsteroid.is_potentially_hazardous_asteroid
          };
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞—Ä–∞
          setImpactData(impactData);
        }

        try {
          const response = await fetch(`http://127.0.0.1:5000/geo?lat=${latLon.lat}&lon=${latLon.lon}`);
          const data = await response.json();
          console.log("üìç –û—Ç–≤–µ—Ç OSM:", data);
          
          // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
          onGeoDataReceived({
            lat: latLon.lat,
            lon: latLon.lon,
            eco_name: data.eco_name || "Unknown",
            biome: data.biome || "Unknown",
            realm: data.realm || "Unknown"
          });
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
          onGeoDataReceived({
            lat: latLon.lat,
            lon: latLon.lon,
            eco_name: "Data not available",
            biome: "Data not available",
            realm: "Data not available"
          });
        }
      }
    }
  };

  useFrame(() => {
    if (meshRef.current) {
      meshRef.current.rotation.y += 0; // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –ó–µ–º–ª–∏
    }
  });

  useEffect(() => {
    setEarthMesh(meshRef.current);
    gl.domElement.addEventListener("click", handleClick);
    return () => gl.domElement.removeEventListener("click", handleClick);
  }, [gl, setEarthMesh, onGeoDataReceived, selectedAsteroid, setImpactData]);

  return (
    <>
      <mesh ref={meshRef} rotation={[0, Math.PI, 0]}>
        <sphereGeometry args={[5, 64, 64]} />
        <meshPhongMaterial
          map={earthTexture}
          bumpMap={bumpTexture}
          bumpScale={0.05}
          specularMap={specularTexture}
          specular={new THREE.Color("grey")}
        />
      </mesh>
    </>
  );
};

function cartesianToLatLon(point: THREE.Vector3) {
  const radius = point.length();
  const lat = 90 - (Math.acos(point.y / radius) * 180 / Math.PI);
  const lon = Math.atan2(point.z, -point.x) * 180 / Math.PI;
  return { lat, lon };
}

export default function GlobeCanvas() {
  const [earthMesh, setEarthMesh] = useState<THREE.Mesh | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [geoData, setGeoData] = useState<GeoData | null>(null);
  const { selectedAsteroid, impactData, setImpactData } = useAsteroid(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç

  const handleGeoDataReceived = (data: GeoData) => {
    setGeoData(data);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setGeoData(null);
  };

  const handleCloseImpactModal = () => {
    setImpactData(null);
  };

  return (
    <>
      <Canvas camera={{ position: [0, 0, 12] }}>
        <ambientLight intensity={0.6} />
        <directionalLight position={[5, 3, 5]} intensity={1} />
        <Earth 
          setEarthMesh={setEarthMesh} 
          onGeoDataReceived={handleGeoDataReceived}
          // selectedAsteroid –±–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –ø—Ä–æ–ø—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        />
        <Asteroid earthMesh={earthMesh} />
        <DreiOrbitControls enableDamping={true} />
      </Canvas>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –≥–µ–æ–¥–∞–Ω–Ω—ã–º–∏ */}
      <Modal 
        isOpen={isModalOpen} 
        onClose={handleCloseModal} 
        geoData={geoData} 
      />

      {/* –ù–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–¥–∞—Ä–µ */}
      <AsteroidImpactModal 
        isOpen={!!impactData}
        onClose={handleCloseImpactModal}
        impactData={impactData}
      />

      {/* –ë–∞–Ω–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ */}
      {selectedAsteroid && (
        <div className="fixed top-4 left-1/2 transform -translate-x-1/2 bg-cyan-900/80 backdrop-blur-sm text-white p-4 rounded-lg border border-cyan-400 z-40">
          <h3 className="font-bold text-cyan-300">‚úÖ –í—ã–±—Ä–∞–Ω –∞—Å—Ç–µ—Ä–æ–∏–¥: {selectedAsteroid.name}</h3>
          <p className="text-sm text-cyan-200">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ó–µ–º–ª—é —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞—Ä!</p>
        </div>
      )}
    </>
  );
}