"use client";

import { useRef, useEffect, useState } from "react";
import * as THREE from "three";
import { Canvas, useFrame, useThree, useLoader } from "@react-three/fiber";
import { TextureLoader } from "three";
import { OrbitControls as DreiOrbitControls } from "@react-three/drei";
import Modal from "./moduleWindows/ModalResult"; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π Modal
import AsteroidImpactModal from "./moduleWindows/AsteroidImpactModal";
import { useAsteroid } from './context/AsteroidContext';

interface GeoData {
  lat: number;
  lon: number;
  eco_name: string;
  biome: string;
  realm: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Å—Å—ã
const formatMass = (massKg: number | undefined): string => {
  if (massKg === undefined || massKg === null || isNaN(massKg)) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }
  
  if (massKg >= 1e12) {
    return `${(massKg / 1e12).toFixed(2)} –º–ª—Ä–¥ —Ç–æ–Ω–Ω`;
  } else if (massKg >= 1e9) {
    return `${(massKg / 1e9).toFixed(2)} –º–ª–Ω —Ç–æ–Ω–Ω`;
  } else if (massKg >= 1e6) {
    return `${(massKg / 1e6).toFixed(2)} —Ç—ã—Å. —Ç–æ–Ω–Ω`;
  } else if (massKg >= 1e3) {
    return `${(massKg / 1e3).toFixed(2)} —Ç–æ–Ω–Ω`;
  } else {
    return `${massKg.toFixed(2)} –∫–≥`;
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
const getAsteroidDisplaySize = (diameterMeters: number): number => {
  const minRealSize = 1;
  const maxRealSize = 1000;
  const minDisplaySize = 0.1;
  const maxDisplaySize = 2;
  
  const logMin = Math.log(minRealSize);
  const logMax = Math.log(maxRealSize);
  const logValue = Math.log(Math.max(diameterMeters, minRealSize));
  
  const normalized = (logValue - logMin) / (logMax - logMin);
  return minDisplaySize + normalized * (maxDisplaySize - minDisplaySize);
};

const getAsteroidColor = (diameter: number, isHazardous: boolean): string => {
  const sizeFactor = Math.min(diameter / 500, 1);
  
  if (isHazardous) {
    return `rgb(${200 + Math.floor(sizeFactor * 55)}, ${100 - Math.floor(sizeFactor * 80)}, ${100 - Math.floor(sizeFactor * 80)})`;
  } else {
    return `rgb(${100 + Math.floor(sizeFactor * 50)}, ${150 + Math.floor(sizeFactor * 50)}, ${200 - Math.floor(sizeFactor * 50)})`;
  }
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ –≤ Three.js —Å—Ü–µ–Ω–µ
const Asteroid = ({ earthMesh }: { earthMesh: THREE.Mesh | null }) => {
  const meshRef = useRef<THREE.Mesh>(null);
  const { selectedAsteroid } = useAsteroid();
  
  useFrame((state) => {
    if (meshRef.current && selectedAsteroid && earthMesh) {
      // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∞—Å—Ç–µ—Ä–æ–∏–¥ –Ω–∞–¥ –ó–µ–º–ª–µ–π
      const time = state.clock.getElapsedTime();
      const radius = 12; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –æ—Ä–±–∏—Ç—ã –¥–ª—è –±–æ–ª—å—à–µ–π –ó–µ–º–ª–∏
      
      meshRef.current.position.x = Math.cos(time * 0.5) * radius;
      meshRef.current.position.z = Math.sin(time * 0.5) * radius;
      meshRef.current.position.y = Math.sin(time * 0.3) * 3;
      
      meshRef.current.rotation.x = time * 0.5;
      meshRef.current.rotation.y = time * 0.3;
    }
  });

  if (!selectedAsteroid) return null;

  const displaySize = getAsteroidDisplaySize(
    selectedAsteroid.estimated_diameter.meters.estimated_diameter_min
  );
  const asteroidColor = getAsteroidColor(
    selectedAsteroid.estimated_diameter.meters.estimated_diameter_min,
    selectedAsteroid.is_potentially_hazardous_asteroid
  );

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç –∏–∑ RGB —Å—Ç—Ä–æ–∫–∏ –≤ THREE.Color
  const threeColor = new THREE.Color(asteroidColor);

  return (
    <mesh ref={meshRef} scale={displaySize}>
      <sphereGeometry args={[1, 16, 16]} />
      <meshStandardMaterial 
        color={threeColor}
        roughness={0.7}
        metalness={0.3}
        emissive={threeColor}
        emissiveIntensity={0.2}
      />
    </mesh>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ó–µ–º–ª–∏
const Earth = ({ 
  setEarthMesh, 
  onGeoDataReceived
}: { 
  setEarthMesh: (mesh: THREE.Mesh | null) => void;
  onGeoDataReceived: (data: GeoData) => void;
}) => {
  const meshRef = useRef<THREE.Mesh>(null);
  const { camera, gl } = useThree();
  const { selectedAsteroid, setImpactData } = useAsteroid();

  const raycaster = new THREE.Raycaster();
  const pointer = new THREE.Vector2();

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç—É—Ä –ó–µ–º–ª–∏
  const [earthTexture, bumpTexture, specularTexture] = useLoader(TextureLoader, [
    "/textures/Albedo.jpg",
    "/textures/night_lights_modified.png",
    "/textures/night_lights_modified.png",
  ]);

  const handleClick = async (event: MouseEvent) => {
    pointer.x = (event.clientX / window.innerWidth) * 2 - 1;
    pointer.y = -(event.clientY / window.innerHeight) * 2 + 1;

    raycaster.setFromCamera(pointer, camera);

    if (meshRef.current) {
      const intersects = raycaster.intersectObject(meshRef.current);
      if (intersects.length > 0) {
        const point = intersects[0].point;
        const latLon = cartesianToLatLon(point);
        console.log("üåç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–¥–∞—Ä–∞:", latLon);

        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∞—Å—Ç–µ—Ä–æ–∏–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–¥–∞—Ä–∞
        if (selectedAsteroid) {
          const impactData = {
            name: selectedAsteroid.name,
            coordinates: latLon,
            mass: formatMass(selectedAsteroid.mass_kg),
            diameter: `${selectedAsteroid.estimated_diameter.meters.estimated_diameter_min.toFixed(2)} –º`,
            velocity: `${parseFloat(selectedAsteroid.relative_velocity.kilometers_per_second).toFixed(2)} –∫–º/—Å`,
            kinetic_energy: selectedAsteroid.kinetic_energy_joules ? 
              `${selectedAsteroid.kinetic_energy_joules.toExponential(2)} –î–∂` : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            crater: selectedAsteroid.crater ? {
              diameter: `${selectedAsteroid.crater.diameter_m.toFixed(1)} –º`,
              dust_radius: `${selectedAsteroid.crater.dust_radius_m.toFixed(1)} –º`, 
              dust_height: `${selectedAsteroid.crater.dust_height_m.toFixed(1)} –º`
            } : {
              diameter: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
              dust_radius: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", 
              dust_height: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            },
            is_hazardous: selectedAsteroid.is_potentially_hazardous_asteroid
          };
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–¥–∞—Ä–∞
          setImpactData(impactData);
        }

        // –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–¥–∞–Ω–Ω—ã–µ
        try {
          const response = await fetch(`http://127.0.0.1:5000/geo?lat=${latLon.lat}&lon=${latLon.lon}`);
          const data = await response.json();
          console.log("üìç –û—Ç–≤–µ—Ç OSM:", data);
          
          // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
          onGeoDataReceived({
            lat: latLon.lat,
            lon: latLon.lon,
            eco_name: data.eco_name || "Unknown",
            biome: data.biome || "Unknown",
            realm: data.realm || "Unknown"
          });
        } catch (err) {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", err);
          onGeoDataReceived({
            lat: latLon.lat,
            lon: latLon.lon,
            eco_name: "Data not available",
            biome: "Data not available",
            realm: "Data not available"
          });
        }
      }
    }
  };

  useFrame(() => {
    if (meshRef.current) {
      meshRef.current.rotation.y += 0.001; // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –ó–µ–º–ª–∏
    }
  });

  useEffect(() => {
    setEarthMesh(meshRef.current);
    gl.domElement.addEventListener("click", handleClick);
    return () => gl.domElement.removeEventListener("click", handleClick);
  }, [gl, setEarthMesh, onGeoDataReceived, selectedAsteroid, setImpactData]);

  return (
    <>
      <mesh ref={meshRef} rotation={[0, Math.PI, 0]}>
        {/* –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –†–ê–ó–ú–ï–† –ó–ï–ú–õ–ò –° 5 –î–û 8 */}
        <sphereGeometry args={[8, 128, 128]} /> {/* –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–¥–∏—É—Å –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é */}
        <meshPhongMaterial
          map={earthTexture}
          bumpMap={bumpTexture}
          bumpScale={0.08} // –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–µ–ª—å–µ—Ñ –¥–ª—è –±–æ–ª—å—à–µ–π –ó–µ–º–ª–∏
          specularMap={specularTexture}
          specular={new THREE.Color("grey")}
          shininess={30}
        />
      </mesh>
    </>
  );
};

function cartesianToLatLon(point: THREE.Vector3) {
  const radius = point.length();
  // –î–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏
  const earthRadius = 8; // –î–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ä–∞–¥–∏—É—Å–æ–º –≤ sphereGeometry
  const normalizedPoint = point.clone().normalize().multiplyScalar(earthRadius);
  
  const lat = 90 - (Math.acos(normalizedPoint.y / earthRadius) * 180 / Math.PI);
  const lon = ((Math.atan2(normalizedPoint.z, -normalizedPoint.x) * 180 / Math.PI) + 360) % 360;
  
  return { 
    lat: parseFloat(lat.toFixed(6)), 
    lon: parseFloat(lon.toFixed(6)) 
  };
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Earth
export default function GlobeCanvas() {
  const [earthMesh, setEarthMesh] = useState<THREE.Mesh | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [geoData, setGeoData] = useState<GeoData | null>(null);
  const { selectedAsteroid, impactData, setImpactData } = useAsteroid();

  const handleGeoDataReceived = (data: GeoData) => {
    setGeoData(data);
    setIsModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsModalOpen(false);
    setGeoData(null);
  };

  const handleCloseImpactModal = () => {
    setImpactData(null);
  };

  return (
    <>
      <div className="relative w-full h-full">
        {/* –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –†–ê–°–°–¢–û–Ø–ù–ò–ï –ö–ê–ú–ï–†–´ –î–õ–Ø –ë–û–õ–¨–®–û–ô –ó–ï–ú–õ–ò */}
        <Canvas camera={{ position: [0, 0, 18], fov: 45 }}>
          <ambientLight intensity={0.8} />
          <directionalLight position={[10, 5, 10]} intensity={1.2} castShadow />
          <pointLight position={[-10, -5, -10]} intensity={0.5} />
          
          <Earth 
            setEarthMesh={setEarthMesh} 
            onGeoDataReceived={handleGeoDataReceived}
          />
          <Asteroid earthMesh={earthMesh} />
          
          {/* –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è –±–æ–ª—å—à–µ–π –ó–µ–º–ª–∏ */}
          <DreiOrbitControls 
            enableDamping={true}
            dampingFactor={0.05}
            minDistance={10}  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –ó–µ–º–ª–∏
            maxDistance={30}  // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
            rotateSpeed={0.5} // –°–∫–æ—Ä–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è
          />
        </Canvas>

        {/* –ë–∞–Ω–Ω–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ */}
        {selectedAsteroid && (
          <div className="fixed top-4 left-1/2 transform -translate-x-1/2 bg-cyan-900/90 backdrop-blur-lg text-white p-4 rounded-xl border border-cyan-400/50 z-40 shadow-2xl max-w-md">
            <div className="flex items-center space-x-3">
              {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ */}
              <div
                className="flex-shrink-0 rounded-full"
                style={{
                  width: '24px',
                  height: '24px',
                  background: `radial-gradient(circle at 30% 30%, ${getAsteroidColor(
                    selectedAsteroid.estimated_diameter.meters.estimated_diameter_min,
                    selectedAsteroid.is_potentially_hazardous_asteroid
                  )}, #000)`,
                  boxShadow: '0 0 10px rgba(0, 255, 255, 0.5)',
                  border: '1px solid #00ffff'
                }}
              />
              <div>
                <h3 className="font-bold text-cyan-300">‚úÖ –í—ã–±—Ä–∞–Ω –∞—Å—Ç–µ—Ä–æ–∏–¥: {selectedAsteroid.name}</h3>
                <p className="text-sm text-cyan-200">–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ó–µ–º–ª—é —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —É–¥–∞—Ä!</p>
              </div>
            </div>
          </div>
        )}

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
        {!selectedAsteroid && (
          <div className="fixed top-4 left-1/2 transform -translate-x-1/2 bg-gray-800/80 backdrop-blur-sm text-white p-4 rounded-lg border border-gray-600 z-40">
            <p className="text-sm">üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∞—Å—Ç–µ—Ä–æ–∏–¥ –∏–∑ —Å–ø–∏—Å–∫–∞, –∑–∞—Ç–µ–º –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ó–µ–º–ª—é</p>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –≥–µ–æ–¥–∞–Ω–Ω—ã–º–∏ - –ò–°–ü–û–õ–¨–ó–£–ï–ú –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢ Modal */}
      <Modal 
        isOpen={isModalOpen} 
        onClose={handleCloseModal} 
        geoData={geoData} 
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–¥–∞—Ä–µ */}
      <AsteroidImpactModal 
        isOpen={!!impactData}
        onClose={handleCloseImpactModal}
        impactData={impactData}
      />
    </>
  );
}