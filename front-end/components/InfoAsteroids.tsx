// components/InfoAsteroids.tsx
"use client";

import React, { useEffect, useState } from "react";
import { useAsteroid } from './context/AsteroidContext';
import { Asteroid, CustomAsteroid, AnyAsteroid, isCustomAsteroid, isNasaAsteroid } from './types/typesAsteroid';

interface ApiResponse {
  count: number;
  asteroids: Asteroid[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
const formatMass = (massKg: number | undefined): string => {
  if (massKg === undefined || massKg === null || isNaN(massKg)) {
    return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
  }
  
  if (massKg >= 1e12) {
    return `${(massKg / 1e12).toFixed(2)} –º–ª—Ä–¥ —Ç–æ–Ω–Ω`;
  } else if (massKg >= 1e9) {
    return `${(massKg / 1e9).toFixed(2)} –º–ª–Ω —Ç–æ–Ω–Ω`;
  } else if (massKg >= 1e6) {
    return `${(massKg / 1e6).toFixed(2)} —Ç—ã—Å. —Ç–æ–Ω–Ω`;
  } else if (massKg >= 1e3) {
    return `${(massKg / 1e3).toFixed(2)} —Ç–æ–Ω–Ω`;
  } else {
    return `${massKg.toFixed(2)} –∫–≥`;
  }
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
const getAsteroidDisplaySize = (diameterMeters: number): number => {
  const minRealSize = 1;
  const maxRealSize = 1000;
  const minDisplaySize = 8;
  const maxDisplaySize = 120;
  
  const logMin = Math.log(minRealSize);
  const logMax = Math.log(maxRealSize);
  const logValue = Math.log(Math.max(diameterMeters, minRealSize));
  
  const normalized = (logValue - logMin) / (logMax - logMin);
  return minDisplaySize + normalized * (maxDisplaySize - minDisplaySize);
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–≤–µ—Ç–∞ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
const getAsteroidColor = (diameter: number, isHazardous: boolean, isCustom: boolean = false): string => {
  const sizeFactor = Math.min(diameter / 500, 1);
  
  if (isCustom) {
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥—ã - —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
    const red = 150 + Math.floor(sizeFactor * 50);
    const green = 100 + Math.floor(sizeFactor * 30);
    const blue = 200 + Math.floor(sizeFactor * 55);
    return `rgb(${red}, ${green}, ${blue})`;
  } else if (isHazardous) {
    // –û–ø–∞—Å–Ω—ã–µ - –∫—Ä–∞—Å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
    const red = 200 + Math.floor(sizeFactor * 55);
    const green = 100 - Math.floor(sizeFactor * 80);
    const blue = 100 - Math.floor(sizeFactor * 80);
    return `rgb(${red}, ${green}, ${blue})`;
  } else {
    // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ - —Å–∏–Ω–∏–µ/–∑–µ–ª–µ–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
    const red = 100 + Math.floor(sizeFactor * 50);
    const green = 150 + Math.floor(sizeFactor * 50);
    const blue = 200 - Math.floor(sizeFactor * 50);
    return `rgb(${red}, ${green}, ${blue})`;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–º–µ—Ç—Ä–∞ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º —Ç–∏–ø–æ–º)
const getAsteroidDiameter = (asteroid: AnyAsteroid): number => {
  if (isCustomAsteroid(asteroid)) {
    return asteroid.diameter;
  } else {
    return asteroid.estimated_diameter.meters.estimated_diameter_min;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º —Ç–∏–ø–æ–º)
const getAsteroidVelocity = (asteroid: AnyAsteroid): number => {
  if (isCustomAsteroid(asteroid)) {
    return asteroid.velocity;
  } else {
    return parseFloat(asteroid.relative_velocity.kilometers_per_second);
  }
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
const AsteroidVisual = ({ 
  asteroid, 
  isSelected
}: { 
  asteroid: AnyAsteroid, 
  isSelected: boolean
}) => {
  const isCustom = isCustomAsteroid(asteroid);
  const diameter = getAsteroidDiameter(asteroid);
  const displaySize = getAsteroidDisplaySize(diameter);
  const asteroidColor = getAsteroidColor(
    diameter,
    asteroid.is_potentially_hazardous_asteroid,
    isCustom
  );

  return (
    <div className="flex items-center space-x-4 mb-4">
      {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ */}
      <div
        className="relative flex-shrink-0 rounded-full transition-all duration-300 ease-out"
        style={{
          width: `${displaySize}px`,
          height: `${displaySize}px`,
          background: `radial-gradient(circle at 30% 30%, ${asteroidColor}, ${asteroidColor}dd)`,
          boxShadow: `
            inset -${displaySize * 0.1}px -${displaySize * 0.05}px ${displaySize * 0.2}px rgba(255,255,255,0.3),
            inset ${displaySize * 0.1}px ${displaySize * 0.05}px ${displaySize * 0.2}px rgba(0,0,0,0.5),
            0 0 ${displaySize * 0.3}px ${asteroidColor}80,
            ${isSelected ? '0 0 20px #00ffff, 0 0 30px #00ffff80' : 'none'}
          `,
          border: isSelected ? '2px solid #00ffff' : 'none'
        }}
      >
        {/* –ö—Ä–∞—Ç–µ—Ä—ã –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ */}
        <div className="absolute top-1/4 left-1/4 w-1 h-1 bg-gray-800/50 rounded-full"></div>
        <div className="absolute top-1/3 right-1/3 w-1.5 h-1.5 bg-gray-900/60 rounded-full"></div>
        <div className="absolute bottom-1/4 left-1/3 w-1 h-1 bg-gray-700/40 rounded-full"></div>
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—ã–±–æ—Ä–∞ */}
        {isSelected && (
          <div className="absolute -top-1 -right-1 w-4 h-4 bg-green-400 rounded-full animate-pulse"></div>
        )}
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ */}
        {isCustom && (
          <div className="absolute -top-1 -left-1 w-3 h-3 bg-purple-500 rounded-full animate-pulse"></div>
        )}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      <div className="flex-1 min-w-0">
        <h3 className="font-orbitron text-xl text-cyan-400 truncate">
          {asteroid.name}
          {isCustom && (
            <span className="ml-2 text-sm text-purple-400">üõ†Ô∏è</span>
          )}
          {isSelected && (
            <span className="ml-2 text-sm text-green-400">‚úì –í—ã–±—Ä–∞–Ω</span>
          )}
        </h3>
        <p className="text-gray-400 text-sm font-space-mono">
          √ò {diameter.toFixed(1)} –º
          {asteroid.is_potentially_hazardous_asteroid && (
            <span className="ml-2 text-red-400">‚ö†Ô∏è –û–ø–∞—Å–µ–Ω</span>
          )}
          {isCustom && (
            <span className="ml-2 text-purple-400">–ö–∞—Å—Ç–æ–º–Ω—ã–π</span>
          )}
        </p>
      </div>
    </div>
  );
};

const AsteroidsList: React.FC = () => {
  const [nasaAsteroids, setNasaAsteroids] = useState<Asteroid[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { selectedAsteroid, setSelectedAsteroid, customAsteroids } = useAsteroid();

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Å—Ç–µ—Ä–æ–∏–¥—ã –∏–∑ NASA –∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ
  const allAsteroids: AnyAsteroid[] = [
    ...nasaAsteroids,
    ...customAsteroids.map(custom => ({
      ...custom,
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      is_custom: true as const
    }))
  ];

  useEffect(() => {
    const fetchAsteroids = async () => {
      try {
        const response = await fetch("http://127.0.0.1:5000/api/asteroids/all");
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data: ApiResponse = await response.json();
        setNasaAsteroids(data.asteroids);
        setError(null);
      } catch (err) {
        console.error("Failed to fetch asteroids:", err);
        setError("Failed to load asteroids data. Is the server running?");
      } finally {
        setLoading(false);
      }
    };

    fetchAsteroids();
  }, []);

  const handleAsteroidClick = (asteroid: AnyAsteroid) => {
    setSelectedAsteroid(asteroid);
    
    if (isCustomAsteroid(asteroid)) {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤
      console.log("üéØ –í—ã–±—Ä–∞–Ω –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞—Å—Ç–µ—Ä–æ–∏–¥:", {
        name: asteroid.name,
        –º–∞—Å—Å–∞: formatMass(asteroid.mass_kg),
        –¥–∏–∞–º–µ—Ç—Ä: `${asteroid.diameter.toFixed(2)} –º`,
        —Å–∫–æ—Ä–æ—Å—Ç—å: `${asteroid.velocity.toFixed(2)} –∫–º/—Å`,
        –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è_—ç–Ω–µ—Ä–≥–∏—è: asteroid.kinetic_energy_joules ? `${asteroid.kinetic_energy_joules.toExponential(2)} –î–∂` : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        –∫—Ä–∞—Ç–µ—Ä: {
          –¥–∏–∞–º–µ—Ç—Ä: `${asteroid.crater_diameter.toFixed(1)} –º`,
          —Ä–∞–¥–∏—É—Å_–≤—ã–±—Ä–æ—Å–∞: `${asteroid.ejecta_radius.toFixed(1)} –º`, 
          –≤—ã—Å–æ—Ç–∞_–ø—ã–ª–∏: `${asteroid.dust_height.toFixed(1)} –º`
        },
        –æ–ø–∞—Å–Ω—ã–π: asteroid.is_potentially_hazardous_asteroid ? "–î–∞" : "–ù–µ—Ç",
        —Ç–∏–ø: "–ö–∞—Å—Ç–æ–º–Ω—ã–π"
      });
    } else {
      // –õ–æ–≥–∏–∫–∞ –¥–ª—è NASA –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤
      console.log("üéØ –í—ã–±—Ä–∞–Ω –∞—Å—Ç–µ—Ä–æ–∏–¥ NASA:", {
        name: asteroid.name,
        –º–∞—Å—Å–∞: formatMass(asteroid.mass_kg),
        –¥–∏–∞–º–µ—Ç—Ä: `${asteroid.estimated_diameter.meters.estimated_diameter_min.toFixed(2)} –º`,
        —Å–∫–æ—Ä–æ—Å—Ç—å: `${parseFloat(asteroid.relative_velocity.kilometers_per_second).toFixed(2)} –∫–º/—Å`,
        –∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è_—ç–Ω–µ—Ä–≥–∏—è: asteroid.kinetic_energy_joules ? `${asteroid.kinetic_energy_joules.toExponential(2)} –î–∂` : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        –∫—Ä–∞—Ç–µ—Ä: asteroid.crater ? {
          –¥–∏–∞–º–µ—Ç—Ä: `${asteroid.crater.diameter_m.toFixed(1)} –º`,
          —Ä–∞–¥–∏—É—Å_–≤—ã–±—Ä–æ—Å–∞: `${asteroid.crater.dust_radius_m.toFixed(1)} –º`, 
          –≤—ã—Å–æ—Ç–∞_–ø—ã–ª–∏: `${asteroid.crater.dust_height_m.toFixed(1)} –º`
        } : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        –æ–ø–∞—Å–Ω—ã–π: asteroid.is_potentially_hazardous_asteroid ? "–î–∞" : "–ù–µ—Ç",
        —Ç–∏–ø: "NASA"
      });
    }
  };

  if (loading) return (
    <div className="p-6">
      <p className="text-gray-600 font-space-mono animate-pulse">
        Loading asteroids data...
      </p>
    </div>
  );

  if (error) return (
    <div className="p-6">
      <p className="text-red-500 font-space-mono">{error}</p>
      <p className="text-sm mt-2 font-inter">
        Make sure the Flask server is running:
        <br />
        <code className="bg-gray-100 px-2 py-1 rounded font-mono text-sm">
          cd back-end && python app.py
        </code>
      </p>
    </div>
  );

  return (
    <div className="divide-y bg-gradient-to-b from-slate-900 to-slate-800 text-white">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π */}
      <div className="p-4 bg-slate-800/50 border-b border-slate-700">
        <h2 className="font-orbitron text-lg text-cyan-300 mb-2">
          ü™ê –°–ø–∏—Å–æ–∫ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤
        </h2>
        <div className="flex space-x-4 text-sm text-gray-400">
          <div className="flex items-center">
            <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
            <span>NASA –∞—Å—Ç–µ—Ä–æ–∏–¥—ã: {nasaAsteroids.length}</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-purple-500 rounded-full mr-2"></div>
            <span>–ú–æ–∏ –∞—Å—Ç–µ—Ä–æ–∏–¥—ã: {customAsteroids.length}</span>
          </div>
        </div>
      </div>

      {selectedAsteroid && (
        <div className="p-4 bg-cyan-900/20 border-l-4 border-cyan-400">
          <h3 className="font-orbitron text-lg text-cyan-300 mb-2">
            ‚úÖ –í—ã–±—Ä–∞–Ω: {selectedAsteroid.name}
            {isCustomAsteroid(selectedAsteroid) && (
              <span className="ml-2 text-purple-400 text-sm">üõ†Ô∏è –ö–∞—Å—Ç–æ–º–Ω—ã–π</span>
            )}
          </h3>
          <p className="text-sm text-cyan-200">
            –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –ó–µ–º–ª—é —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –∞—Å—Ç–µ—Ä–æ–∏–¥!
          </p>
        </div>
      )}
      
      {allAsteroids.length === 0 ? (
        <div className="p-8 text-center">
          <p className="font-space-mono text-gray-400 mb-4">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤</p>
          <p className="text-sm text-gray-500">
            –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –∞—Å—Ç–µ—Ä–æ–∏–¥
          </p>
        </div>
      ) : (
        <ul className="divide-y divide-gray-700">
          {allAsteroids.map((asteroid, idx) => (
            <li
              key={asteroid.id || idx}
              className={`p-6 hover:bg-slate-700/50 transition-all duration-300 cursor-pointer ${
                selectedAsteroid?.id === asteroid.id 
                  ? 'bg-cyan-900/30 border-l-4 border-cyan-400' 
                  : asteroid.is_potentially_hazardous_asteroid 
                    ? 'bg-red-900/20 hover:bg-red-900/30' 
                    : isCustomAsteroid(asteroid)
                    ? 'bg-purple-900/10 hover:bg-purple-900/20'
                    : ''
              }`}
              onClick={() => handleAsteroidClick(asteroid)}
            >
              {/* –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ */}
              <AsteroidVisual 
                asteroid={asteroid} 
                isSelected={selectedAsteroid?.id === asteroid.id}
              />

              {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="space-y-2 font-inter text-gray-300">
                {isCustomAsteroid(asteroid) ? (
                  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤
                  <>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–¢–∏–ø:</span>
                      <span className="font-space-mono text-purple-400">üõ†Ô∏è –ö–∞—Å—Ç–æ–º–Ω—ã–π</span>
                    </p>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–î–∏–∞–º–µ—Ç—Ä:</span>
                      <span className="font-space-mono">
                        {asteroid.diameter.toFixed(2)} –º
                      </span>
                    </p>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–ú–∞—Å—Å–∞:</span>
                      <span className="font-space-mono text-yellow-300">
                        {formatMass(asteroid.mass_kg)}
                      </span>
                    </p>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                      <span className="font-space-mono">
                        {asteroid.velocity.toFixed(2)} –∫–º/—Å
                      </span>
                    </p>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–°–æ–∑–¥–∞–Ω:</span>
                      <span className="font-space-mono">
                        {new Date(asteroid.created_at).toLocaleDateString('ru-RU')}
                      </span>
                    </p>
                  </>
                ) : (
                  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è NASA –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤
                  <>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–î–∞—Ç–∞ —Å–±–ª–∏–∂–µ–Ω–∏—è:</span>
                      <span className="font-space-mono">{asteroid.date}</span>
                    </p>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–î–∏–∞–º–µ—Ç—Ä:</span>
                      <span className="font-space-mono">
                        {asteroid.estimated_diameter.meters.estimated_diameter_min.toFixed(2)} –º
                      </span>
                    </p>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–ú–∞—Å—Å–∞:</span>
                      <span className="font-space-mono text-yellow-300">
                        {formatMass(asteroid.mass_kg)}
                      </span>
                    </p>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
                      <span className="font-space-mono">
                        {parseFloat(asteroid.relative_velocity.kilometers_per_second).toFixed(2)} –∫–º/—Å
                      </span>
                    </p>
                    <p className="flex items-center">
                      <span className="w-40 text-gray-400">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</span>
                      <span className="font-space-mono">
                        {(parseFloat(asteroid.miss_distance.kilometers)/1000).toFixed(0)} —Ç—ã—Å. –∫–º
                      </span>
                    </p>
                  </>
                )}
                
                <p className="flex items-center mt-4">
                  <span className="w-40 text-gray-400">–û–ø–∞—Å–Ω–æ—Å—Ç—å:</span>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                    asteroid.is_potentially_hazardous_asteroid 
                      ? 'bg-red-500/20 text-red-400' 
                      : 'bg-green-500/20 text-green-400'
                  }`}>
                    {asteroid.is_potentially_hazardous_asteroid ? '‚ö†Ô∏è –û–ø–∞—Å–µ–Ω' : '‚úÖ –ë–µ–∑–æ–ø–∞—Å–µ–Ω'}
                  </span>
                </p>
              </div>
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default AsteroidsList;